class Node{
    constructor(val){
        this.val=val;
        this.next=null;
    }
}

class SinglyLinkedList{
    constructor(){
        this.head=null;
        this.tail=null;
        this.length=0;
    }

    push(val){
        let newNode=new Node(val);
        if(!this.head){
           this.head=newNode;
            this.tail=this.head;
        } else {
            this.tail.next=newNode;
            this.tail=newNode;
        }
       this.length++;
        return this;
    }

    traverse(){
        let current=this.head;
        while(current){
            current=current.next;
        }
    }

    pop(){
        if(!this.head){
            return undefined;
        }
        let current=this.head;
        let newTail=current;
        while(current.next){
            newTail=current;
            current=current.next;
        }
         this.tail=newTail;
        this.tail.next=null;
        this.length--;
        if(this.length === 0){
            this.head=null;
            this.tail=null;
        }
        return current;
    }

     shift(){
        if(!this.head) return undefined;
        let currentHead=this.head;
        this.head=currentHead.next;
         this.length--;
         if(this.length === 0) this.tail=null;
         return currentHead;
    }

    unshift(val){
        let newHead=new Node(val);
        if(!this.head){
            this.head=newHead;
            this.tail=this.head;
        } else {
        newHead.next=this.head;
        this.head=newHead;
        }
        this.length++;
        return this;
    }

    get(idx){
        if(idx<0||idx>=this.length)
            return null;
            let counter=0;
            let counterValue=this.head;
            while(counter!==idx){
                counterValue=counterValue.next;
                counter++;
           
        }
         return counterValue;
    }

    set(idx,val){
        let foundNode=this.get(idx);
        if(foundNode){
            foundNode.val=val;
            return true;
        }
        return false;
    }

    insert(idx,val){
        
        if(idx<0||idx>this.length) return false;

        if(idx===this.length){
            this.push(val);
            return true;
        }

        if(idx===0){
            this.unshift(val);
          return true;
        }
        let newNode=new Node(val);
        let prev=this.get(idx-1);
        let temp=prev.next;
        prev.next=newNode;
        newNode.next=temp;
        this.length++;
        return true;
    }

    reverse(){
        let node=this.head;
        this.head=this.tail;
        this.tail=node;
        let next;
        let prev=null;
        for(let i=0;i<this.lengh;i++){
            next=node.next;
            node.next=prev;
            prev=node;
            node=next;
        }
    } 
}


var list= new SinglyLinkedList();
list.push("hello").push("goodbye").push('!');
